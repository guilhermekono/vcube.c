/* Programa: exemplo para aprender simulação SMPL no programa tempo.c 
Sistemas distribuídos 25/10/2021*/

#include <stdio.h>
#include <stdlib.h>
#include "smpl.h"

/*Eventos*/

#define test 1
#define fault 2
#define repair 3

/* Descritor do nodo SMPL */
typedef struct {
    int id; /*identificador da facility*/
} tnodo;

tnodo *nodo;

int main(int argc, char *argv[]){
    static int N, /*número total de processos, entrado na linha d ecomando*/
               token, /*o processo que está executando em um instante de tempo*/
               event,
               r,
               i;
    static char fa_name[5]; /*nome da facility*/

    if (argc!=2){
        puts("Uso correto:tempo <numero de processos> ");
	exit(1);

    }

    N = atoi(argv[1]);
    smpl(0, "Um exemplo de simulação");
    reset();
    stream(1);

    /* inicialização de variáveis*/

    nodo = (tnodo *) malloc(sizeof(tnodo)*N);

    for(i=0;i<N; i++){
        memset(fa_name, '\0', 5);
        sprintf(fa_name, "%d", i);
        nodo[i].id = facility(fa_name, 1);
    }

    /*escalonar os eventos*/
	
    for(i=0; i<N; i++){
    	
        schedule(test, 30.0, i); /*estamos escalonando testes para todos os nodos executarem em t=30*/
    }

        schedule(fault, 31.0, 1); /*o processo 1 falha no tempo 31*/

        schedule(repair, 61.0, 1); /*o processo 1 recupera no tempo 61*/
	puts("----------------------------------------------------");
	puts("Sistemas Distribuídos 2021/ERE4: Tarefa Prática 0");
	puts("Digitar, compilar e executar o programa tempo.c");
	puts("Autor: Guilherme Eduardo Konopatzki Filho");
	puts("Última alteração: 15/11/2021");
	printf("Este programa foi executado para N = %d processos.\n", N);
	puts("----------------------------------------------------");

	
        while(time() < 150.0){
            
            cause(&event, &token); /*causar é verificar*/
            switch(event){
                case test:
                    if(status(nodo[token].id)!=0) break; /*se o testador estiver falho: ele não testa*/
                    printf("O nodo %d vai testar no tempo %4.1f\n", token, time());
                    schedule(test, 30.0, token);

                    break;
                case fault:
                    r = request(nodo[token].id, token, 0); /*request significa ocupado*/
                    if(r != 0) {
                        puts("Não foi possível falhar o nodo...");
                        break;
                    }
                    printf("O nodo %d falhou no tempo %4.1f\n", token, time());
                    break;
                case repair:
                    release(nodo[token].id, token);
                    printf("O nodo %d recuperou no tempo %4.1f\n", token, time());
                    schedule(test, 30.0, token);
                    break;
                
            }/*switch*/
        }/*while*/
        exit(0);
    /*main*/

}




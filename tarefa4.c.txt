//Tarefa 4: Quando um processo correto testa outro processo correto obtém as informações de diagnóstico do processo testado sobre todos os processos do sistema exceto aqueles que testou nesta rodada, além do próprio testador.
//Aluno: Guilherme Eduardo Konopatzki Filho
//Disciplina: Sistemas distribuídos
//Professor: Elias Duarte
//Última Modificação: 15/11/2021

#include <stdio.h>
#include <stdlib.h>
#include "smpl.h"

/*eventos*/
#define test 1
#define fault 2
#define repair 3

/*descritor do nodo*/
typedef struct{
	int id;
	/*memoria local do nodo aqui*/
	int *STATE;//vetor para armazenar informações dos nodos
}tnodo;

tnodo *nodo;
int main(int argc, char const *argv[]) {
	static int N, token, event, r, i, testado;
	static char fa_name[5];
	/*facility representa o objeto simulado*/

	if(argc != 2){
		puts("Uso correto: tempo <num-nodos>");
		exit(1);
	}

	N = atoi(argv[1]);
	smpl(0, "programa tempo");
	reset();
	stream(1);
	nodo = (tnodo*) malloc(sizeof(tnodo)*N);
	for (i = 0; i < N; i++) {
	 	memset(fa_name, '\0', 5);
	 	printf(fa_name, "%d", i);
	 	nodo[i].id = facility(fa_name, 1);
		nodo[i].STATE = (int*) malloc(sizeof(int)*N);
		for(int j = 0; j < N; j++){ //for para inicializar o STATE de todos os nodos como UNKNOWN (-1)
			nodo[i].STATE[j] = -1;
		}
	 }

	 /*schedule inicial*/
	 for (i = 0; i < N; i++)
	 	schedule(test, 30.0, i);
	 schedule(fault, 31.0, 1);
	 schedule(repair, 69.0, 1);
	 puts("----------------------------------------------------");
	 puts("Sistemas Distribuídos 2021/ERE4: Tarefa Prática 4");
	 puts("Quando um processo correto testa outro processo correto obtém as informações de diagnóstico do processo testado sobre todos os processos do sistema exceto aqueles que testou nesta rodada, além do próprio testador");
	 puts("Autor: Guilherme Eduardo Konopatzki Filho");
	 puts("Última alteração: 15/11/2021");
	 printf("Este programa foi executado para N = %d processos.\n", N);
	 puts("----------------------------------------------------");
	 while(time() < 130.0) {
	 	cause(&event, &token);
	 	switch(event) {
	 		case test:
	 		testado = (token+1)%N;//próximo nodo no anel
	 		if(status(nodo[token].id) != 0) break;
			//printa o vetor STATE do nodo atual (token) antes de efetuar o teste e atualizar o valor do mesmo
			printf("Vetor STATE do nodo %d\n>> ", token);
			for(int j = 0; j < N; j++)
				printf("%d ", nodo[token].STATE[j]);
			printf("\n");
			for(i = 0; i < N; i++){//for para continuar procurando por nodo sem-falha
				if(status(nodo[testado].id) != 0) {
					//se nodo está falho, atualiza STATE com 1 e exibe mensagem
					nodo[token].STATE[testado] = 1;
					printf("O valor de STATE do nodo %d foi atualizado para 1\n", testado);
					printf("O nodo %d encontrou o nodo %d FALHO no tempo %5.1f e continuou a procurar\n", token, testado, time());
                    printf("------\n");
					testado++;//incrementa para testar o próximo, até encontrar um sem-falha
				} else if(testado != token){
					//se nodo a ser testado não for o atual (token), então encontrou um nodo sem-falha!
					//se sem-falha, atualiza valor de STATE para 0 e exibe mensagem
					nodo[token].STATE[testado] = 0;
                    printf("O valor de STATE do nodo %d foi atualizado para 0\n", testado);
					printf("O nodo %d encontrou o nodo %d SEM-FALHA no tempo %5.1f\n", token, testado, time());
                    printf("------\n");

					for(int j = 0; j < N; j++) {//for para que o vetor STATE de token seja atualizado com as informações do nodo sem-falha encontrado
						if(nodo[token].STATE[j] == -1) {// pega apenas informação de nodo que ainda não testou!
							nodo[token].STATE[j] = nodo[testado].STATE[j];
						}
					}
					break;
				}
			}

	 		schedule(test, 30.0, token);
	 		break;
	 		case fault:
	 		r = request(nodo[token].id, token, 0);
	 		if(r != 0) {
	 			puts("ImpossÃ­vel falhar nodo");
	 			exit(1);
	 		}
	 		printf("O nodo %d falhou no tempo %5.1f\n", token, time());
	 		break;
	 		case repair:
	 		release(nodo[token].id, token);
	 		printf("O nodo %d recuperou no tempo %5.1f\n", token, time());
	 		schedule(test, 30.0, token);
	 	}
	 }
	return 0;
}